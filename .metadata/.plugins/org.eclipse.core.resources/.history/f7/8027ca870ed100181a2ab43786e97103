/*--------------------------------Mqueue Send Documentation--------------------------------
**  mqsend.c
**  Simple example of using mqueue messaging between processes
**
**  This code requires that the mqueue service is started on the target.
**  The mqueue manager implements POSIX 1003.1b message queues.
**  By default it is not started on QNX 6.6 VM target - just type
**  'mqueue' at the terminal prior to starting this processes.
**
**  For more info, read: Why use POSIX message queues?
**  http://www.qnx.com/developers/docs/660/index.jsp
**
**  Run mqsend in one terminal window, then after a few messages
**  are queued (less than 5) run mqreceive in another terminal window
**
**--------------------------------Keypad Documentation--------------------------------
**  Demonstration program to read the XC4602 Jaycar Keypad
**  on a BeagleBone Black (BBB) running QNX 6.60 that matches the lecture notes
**
**  The Keypad uses the TTP229-BSF TonTouch Chip and can be
**  purchased from Jaycar (XC4602). Make sure it is in 16 key
**  mode by bridging our the two pins (pair 3 on P1 on keypad)
**
**  When Key press is detected a hardware interrupt will be fired
**  IRQ 99 (top part of GPIO1, ie IO bit 28 of GPIO1). The key
**  will be decoded and a thread will start which controls the
**  4 LEDS on the beaglebone to switch on and off for a 100 ms
**  duration to indicate a valid key has been pressed and decoded.
**
**--------------------------------Pin Configuration--------------------------------
**  XC4602 pin     -> BeagleBone Black Pin
**  VCC - VDD_3V3B -> Pin P9_03 or P9_04
**  GND - DGND     -> Pin P9_01 or P9_02
**  SCL - GPIO1_16 -> Pin P9_15
**  SD0 - GPIO1_28 -> Pin P9_12
**
**  Author: Samuel Ippolito
**  Date:   04-05-2017
**
*/

//--------------------------------Headers--------------------------------
#include <stdlib.h>
#include <stdio.h>
#include <mqueue.h>
#include <time.h>
#include <sys/stat.h>
#include <hw/inout.h>      // for in32() and out32();
#include <sys/mman.h>      // for mmap_device_io();
#include <stdint.h>        // for unit32 types
#include <sys/neutrino.h>  // for ThreadCtl( _NTO_TCTL_IO_PRIV , NULL)

//--------------------------------Global Definitions--------------------------------
#define AM335X_CONTROL_MODULE_BASE   (uint64_t) 0x44E10000
#define AM335X_CONTROL_MODULE_SIZE   (size_t)   0x00001448
#define AM335X_GPIO_SIZE             (uint64_t) 0x00001000
#define AM335X_GPIO1_BASE            (size_t)   0x4804C000

#define LED0          (1<<21)   // GPIO1_21
#define LED1          (1<<22)   // GPIO1_22
#define LED2          (1<<23)   // GPIO1_23
#define LED3          (1<<24)   // GPIO1_24

#define SD0 (1<<28)  // SD0 is connected to GPIO1_28
#define SCL (1<<16)  // SCL is connected to GPIO1_16


#define GPIO_OE        0x134
#define GPIO_DATAIN    0x138
#define GPIO_DATAOUT   0x13C

#define GPIO_IRQSTATUS_SET_1 0x38   // enable interrupt generation
#define GPIO_IRQWAKEN_1      0x48   // Wakeup Enable for Interrupt Line
#define GPIO_FALLINGDETECT   0x14C  // set falling edge trigger
#define GPIO_CLEARDATAOUT    0x190  // clear data out Register
#define GPIO_IRQSTATUS_1     0x30   // clear any prior IRQs

#define GPIO1_IRQ 99  // TRG page 465 list the IRQs for the am335x


#define P9_12_pinConfig 0x878 //  conf_gpmc_ben1 (TRM pp 1364) for GPIO1_28,  P9_12

// GPMC_A1_Configuration
#define PIN_MODE_0   0x00
#define PIN_MODE_1   0x01
#define PIN_MODE_2   0x02
#define PIN_MODE_3   0x03
#define PIN_MODE_4   0x04
#define PIN_MODE_5   0x05
#define PIN_MODE_6   0x06
#define PIN_MODE_7   0x07

// PIN MUX Configuration strut values  (page 1420 from TRM)
#define PU_ENABLE    0x00
#define PU_DISABLE   0x01
#define PU_PULL_UP   0x01
#define PU_PULL_DOWN 0x00
#define RECV_ENABLE  0x01
#define RECV_DISABLE 0x00
#define SLEW_FAST    0x00
#define SLEW_SLOW    0x01

// Mqueue Send definitions
#define  MESSAGESIZE 1000

#define Q_FLAGS O_RDWR | O_CREAT
#define Q_Mode S_IRUSR | S_IWUSR
/*
** For oflag overview see: http://www.qnx.com/developers/docs/660/index.jsp
** O_RDWR   - send-receive   (others: O_RDONLY (receive-only), O_WRONLY (send-only))
** O_CREAT  - instruct the server to create a new message queue
**
** Mode flags overview see: http://www.qnx.com/developers/docs/660/index.jsp
** S_IRUSR  - Read permission
** S_IWUSR  - Write permission
**/

//--------------------------------Global Variables--------------------------------
char key_press_data[1000];
char time_date[80];

typedef union _CONF_MODULE_PIN_STRUCT   // See TRM Page 1420
{
  unsigned int d32;
  struct {    // name: field size
           unsigned int conf_mmode : 3;       // LSB
           unsigned int conf_puden : 1;
           unsigned int conf_putypesel : 1;
           unsigned int conf_rxactive : 1;
           unsigned int conf_slewctrl : 1;
           unsigned int conf_res_1 : 13;      // reserved
           unsigned int conf_res_2 : 12;      // reserved MSB
         } b;
} _CONF_MODULE_PIN;

//--------------------------------Function Definitions--------------------------------
void strobe_SCL(uintptr_t gpio_port_add) {
   uint32_t PortData;
   PortData = in32(gpio_port_add + GPIO_DATAOUT);// value that is currently on the GPIO port
   PortData &= ~(SCL);
   out32(gpio_port_add + GPIO_DATAOUT, PortData);// Clock low
   delaySCL();

   PortData  = in32(gpio_port_add + GPIO_DATAOUT);// get port value
   PortData |= SCL;// Clock high
   out32(gpio_port_add + GPIO_DATAOUT, PortData);
   delaySCL();
}


// Thread used to Flash the 4 LEDs on the BeagleBone for 100ms
void *Flash_LED0_ex(void *notused)
{
    pthread_detach(pthread_self());  // no need for this thread to join
    uintptr_t gpio1_port = mmap_device_io(AM335X_GPIO_SIZE, AM335X_GPIO1_BASE);

    uintptr_t val;
    // Write GPIO data output register
    val  = in32(gpio1_port + GPIO_DATAOUT);
    val |= (LED0|LED1|LED2|LED3);
    out32(gpio1_port + GPIO_DATAOUT, val);

    usleep(100000);  // 100 ms wait
    //sched_yield();  // if used without the usleep, this line will flash the LEDS for ~4ms

    val  = in32(gpio1_port + GPIO_DATAOUT);
    val &= ~(LED0|LED1|LED2|LED3);
    out32(gpio1_port + GPIO_DATAOUT, val);

    munmap_device_io(gpio1_port, AM335X_GPIO_SIZE);

}


void delaySCL()  {// Small delay used to get timing correct for BBB
  volatile int i, a;
  for(i=0;i<0x1F;i++) // 0x1F results in a delay that sets F_SCL to ~480 kHz
  {   // i*1 is faster than i+1 (i+1 results in F_SCL ~454 kHz, whereas i*1 is the same as a=i)
     a = i;
  }
  // usleep(1);  //why doesn't this work? Ans: Results in a period of 4ms as
  // fastest time, which is 250Hz (This is to slow for the TTP229 chip as it
  // requires F_SCL to be between 1 kHz and 512 kHz)
}

uint32_t KeypadReadIObit(uintptr_t gpio_base, uint32_t BitsToRead)  {
   volatile uint32_t val = 0;
   val  = in32(gpio_base + GPIO_DATAIN);// value that is currently on the GPIO port

   val &= BitsToRead; // mask bit
   //val = val >> (BitsToRead % 2);
   //return val;
   if(val==BitsToRead)
       return 1;
   else
       return 0;
}


void DecodeKeyValue(uint32_t word)
{
    switch(word)
    {
        case 0x01:
            printf("Key  1 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data," 1|");
            break;
        case 0x02:
            printf("Key  2 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data," 2|");
            break;
        case 0x04:
            printf("Key  3 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data," 3|");
            break;
        case 0x08:
            printf("Key  4 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data," 4|");
            break;
        case 0x10:
            printf("Key  5 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data," 5|");
            break;
        case 0x20:
            printf("Key  6 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data," 6|");
            break;
        case 0x40:
            printf("Key  7 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data," 7|");
            break;
        case 0x80:
            printf("Key  8 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data," 8|");
            break;
        case 0x100:
            printf("Key  9 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data," 9|");
            break;
        case 0x200:
            printf("Key 10 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data,"10|");
            break;
        case 0x400:
            printf("Key 11 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data,"11|");
            break;
        case 0x800:
            printf("Key 12 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data,"12|");
            break;
        case 0x1000:
            printf("Key 13 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data,"13|");
            break;
        case 0x2000:
            printf("Key 14 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data,"14|");
            break;
        case 0x4000:
            printf("Key 15 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data,"15|");
            break;
        case 0x8000:
            printf("Key 16 pressed\n");
            pthread_create(NULL, NULL, Flash_LED0_ex, NULL); // flash LED
            strcat(key_press_data,"16|");
            break;
        case 0x00:  // key release event (do nothing)
            break;
        default:
            printf("Key pressed could not be determined - %lu\n", word);
            strcat(key_press_data,"NK|");
    }
}


//-------------------------------------------------------------------------
int main(int argc, char *argv[]) {
  uintptr_t control_module = mmap_device_io(AM335X_CONTROL_MODULE_SIZE,
                                                               AM335X_CONTROL_MODULE_BASE);
  uintptr_t gpio1_base     = mmap_device_io(AM335X_GPIO_SIZE          , AM335X_GPIO1_BASE);


  if( (control_module)&&(gpio1_base) )
  {
    ThreadCtl( _NTO_TCTL_IO_PRIV , NULL);// Request I/O privileges;

    volatile uint32_t val = 0;

    // set DDR for LEDs to output and GPIO_28 to input
    val = in32(gpio1_base + GPIO_OE); // read in current setup for GPIO1 port
    val |= 1<<28;                     // set IO_BIT_28 high (1=input, 0=output)
    out32(gpio1_base + GPIO_OE, val); // write value to input enable for data pins
    val &= ~(LED0|LED1|LED2|LED3);    // write value to output enable
    out32(gpio1_base + GPIO_OE, val); // write value to output enable for LED pins

    val = in32(gpio1_base + GPIO_OE);
    val &= ~SCL;                      // 0 for output
    out32(gpio1_base + GPIO_OE, val); // write value to output enable for data pins


    val = in32(gpio1_base + GPIO_DATAOUT);
    val |= SCL;              // Set Clock Line High as per TTP229-BSF datasheet
    out32(gpio1_base + GPIO_DATAOUT, val); // for 16-Key active-Low timing diagram


    in32s(&val, 1, control_module + P9_12_pinConfig );
    printf("Original pinmux configuration for GPIO1_28 = %#010x\n", val);

    // set up pin mux for the pins we are going to use  (see page 1354 of TRM)
    volatile _CONF_MODULE_PIN pinConfigGPMC; // Pin configuration strut
    pinConfigGPMC.d32 = 0;
    // Pin MUX register default setup for input (GPIO input, disable pull up/down - Mode 7)
    pinConfigGPMC.b.conf_slewctrl = SLEW_SLOW;    // Select between faster or slower slew rate
    pinConfigGPMC.b.conf_rxactive = RECV_ENABLE;  // Input enable value for the PAD
    pinConfigGPMC.b.conf_putypesel= PU_PULL_UP;   // Pad pullup/pulldown type selection
    pinConfigGPMC.b.conf_puden = PU_ENABLE;       // Pad pullup/pulldown enable
    pinConfigGPMC.b.conf_mmode = PIN_MODE_7;      // Pad functional signal mux select 0 - 7

    // Write to PinMux registers for the GPIO1_28
    out32(control_module + P9_12_pinConfig, pinConfigGPMC.d32);
    in32s(&val, 1, control_module + P9_12_pinConfig);   // Read it back
    printf("New configuration register for GPIO1_28 = %#010x\n", val);

    // Setup IRQ for SD0 pin ( see TRM page 4871 for register list)
    out32(gpio1_base + GPIO_IRQSTATUS_SET_1, SD0);// Write 1 to GPIO_IRQSTATUS_SET_1
    out32(gpio1_base + GPIO_IRQWAKEN_1, SD0);    // Write 1 to GPIO_IRQWAKEN_1
    out32(gpio1_base + GPIO_FALLINGDETECT, SD0);    // set falling edge
    out32(gpio1_base + GPIO_CLEARDATAOUT, SD0);     // clear GPIO_CLEARDATAOUT
    out32(gpio1_base + GPIO_IRQSTATUS_1, SD0);      // clear any prior IRQs

    struct sigevent event; // fill in "event" structure
    memset(&event, 0, sizeof(event));
    event.sigev_notify = SIGEV_INTR;  // Setup for external interrupt

    int id = 0; // Attach interrupt Event to IRQ for GPIO1B  (upper 16 bits of port)
    id = InterruptAttachEvent (GPIO1_IRQ, &event, _NTO_INTR_FLAGS_TRK_MSK);


    printf("Welcome to the QNX Momentics mqueue send process\n");
    time_t rawtime;
    struct tm * timeinfo;
    mqd_t  qd;
    int    livivng = 1;
    char   buf[MESSAGESIZE];

    struct  mq_attr  attr;
    // attr.mq_maxmsg = 100;
    attr.mq_msgsize = MESSAGESIZE;
    attr.mq_flags = 0;

    // example using the default path notation.
    const char * MqueueLocation = "/test_queue";    // will be located /dev/mqueue/test_queue  */

    qd = mq_open(MqueueLocation, Q_FLAGS, Q_Mode, &attr);            // full path will be: <host_name>/dev/mqueue/test_queue
    DIR* dir = opendir("/dev/ESP");

    // Keypad code
    printf( "Waiting For Interrupt 99 - key press on Jaycar (XC4602) keypad\n");
    int i = 0;
    for(;;)   // for loop that correctly decodes key press
    {
        InterruptWait( 0, NULL );   // block this thread until an interrupt occurs
        InterruptDisable();

        volatile uint32_t word = 0;
        //  confirm that SD0 is still low (that is a valid Key press event has occurred)
        val = KeypadReadIObit(gpio1_base, SD0);  // read SD0 (means data is ready)

        if(val == 0)  // start reading key value form the keypad
        {
             word = 0;  // clear word variable

             delaySCL(); // wait a short period of time before reading the data Tw  (10 us)

             for(i=0;i<16;i++)           // get data from SD0 (16 bits)
             {
                strobe_SCL(gpio1_base);  // strobe the SCL line so we can read in data bit

                val = KeypadReadIObit(gpio1_base, SD0); // read in data bit
                val = ~val & 0x01;                      // invert bit and mask out everything but the LSB
                //printf("val[%u]=%u, ",i, val);
                word = word | (val<<i);  // add data bit to word in unique position (build word up bit by bit)
             }
             //printf("word=%u\n",word);
             DecodeKeyValue(word);
             if (qd != -1) {
                strcpy(buf, key_press_data);          //put the message in a char[] so it can be sent
                if (!strcmp(buf, "")) {
                    memset(buf,0,strlen(buf));
                    memset(key_press_data,0,strlen(key_press_data));
                } else {
                    time   (&rawtime);
                    timeinfo = localtime (&rawtime);
                    strftime (time_date,80,"%D %X|",timeinfo);
                    strcat(buf, time_date);
                    printf("queue: '%s'\n\n", buf);           //print the message to this processes terminal
                    if (dir) {
                      printf("Exists!\n");
                      mq_send(qd, buf, MESSAGESIZE, 0);       //send the mqueue
                      memset(buf,0,strlen(buf));
                      memset(key_press_data,0,strlen(key_press_data));
                        closedir(dir);
                    } else if (ENOENT == errno) {
                        printf("Does not exists\n");
                    } else {
                        printf("Uknownn Error\n");
                    }
                }
                                                            // not to expect any more messages. 5 char long because
                                                            // of '/0' char at end of the "done" string
                // printf("\nAll Messages sent to the queue\n");

                // as soon as this code executes the mqueue data will be deleted
                // from the /dev/mqueue/test_queue  file structure
            } else {
                printf("\nThere was an ERROR opening the message queue!");
                printf("\nHave you started the 'mqueue' process on the VM target?\n");
            }
        }
        out32(gpio1_base + GPIO_IRQSTATUS_1, SD0); //clear IRQ
        InterruptUnmask(GPIO1_IRQ, id);
        InterruptEnable();
    }
    mq_close(qd);
    mq_unlink(MqueueLocation);

    munmap_device_io(control_module, AM335X_CONTROL_MODULE_SIZE);
   }
   printf("Main Terminated...!\n");
   return EXIT_SUCCESS;
}
